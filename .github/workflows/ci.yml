name: CI_action

on:
  pull_request:
    branches:
      - main

jobs:
  CI_job:
    runs-on: ubuntu-latest

    env:
      GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
      GCLOUD_STORAGE_PATH_MANIFEST: ${{ secrets.GCLOUD_STORAGE_PATH_MANIFEST }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: pip install -r dbt-requirements.txt

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.4.3
      with:
        credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}

    - name: Extract project ID from service key
      id: extract_project
      run: echo "PROJECT_ID=$(echo '${{ secrets.GCLOUD_SERVICE_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Setup dbt state directory
      run: mkdir -p ./dbt-state

    - name: Copy manifest.json from Google Cloud Storage
      run: |
        gsutil cp gs://${{ env.GCLOUD_STORAGE_PATH_MANIFEST }}/manifest.json ./dbt-state/ || echo "Manifest not found"
    
    - name: Get Schema ID
      id: schema_id
      run: echo "SCHEMA_ID=${{ github.event.pull_request.number }}__${{ github.sha }}" >> $GITHUB_ENV

    - name: Run dbt debug
      run: |
        dbt debug --target pr --vars "schema_id: $SCHEMA_ID"

    - name: Run dbt deps
      run: |
        dbt deps --target pr --vars "schema_id: $SCHEMA_ID"

    - name: Run dbt seed first
      run: |
        dbt seed --target pr --vars "schema_id: $SCHEMA_ID"

    - name: Run dbt models and tests
      run: |
        if [ -f "./dbt-state/manifest.json" ]; then
          echo "ðŸŽ¯ Using state-based execution"
          dbt run -s 'state:modified+' --defer --state ./dbt-state/ --target pr --vars "schema_id: $SCHEMA_ID"
          dbt test -s 'state:modified+' --defer --state ./dbt-state/ --target pr --vars "schema_id: $SCHEMA_ID"
        else
          echo "ðŸ“‹ Running full execution"
          dbt run --target pr --vars "schema_id: $SCHEMA_ID"
          dbt test --target pr --vars "schema_id: $SCHEMA_ID"
        fi

    - name: Drop PR schema
      run: |
        dbt run-operation drop_pr_staging_schemas \
          --args '{"project_id": "${{ env.PROJECT_ID }}", "PR_number": "${{ github.event.pull_request.number }}"}' \
          --profiles-dir ./