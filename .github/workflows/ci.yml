name: CI_action

on:
  pull_request:
    branches:
      - main

jobs:
  CI_job:
    runs-on: ubuntu-latest

    env:
      GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
      GCLOUD_STORAGE_PATH_MANIFEST: ${{ secrets.GCLOUD_STORAGE_PATH_MANIFEST }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: pip install -r dbt-requirements.txt

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.4.3
      with:
        credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}

    - name: Extract project ID from service key
      id: extract_project
      run: echo "PROJECT_ID=$(echo '${{ secrets.GCLOUD_SERVICE_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Setup dbt state directory
      run: mkdir -p ./dbt-state

    - name: Copy manifest.json from Google Cloud Storage
      run: |
        gsutil cp gs://${{ env.GCLOUD_STORAGE_PATH_MANIFEST }}/manifest.json ./dbt-state/ || echo "Manifest not found"
    
    - name: Get Schema ID
      id: schema_id
      run: echo "SCHEMA_ID=${{ github.event.pull_request.number }}__${{ github.sha }}" >> $GITHUB_ENV

    - name: Run dbt debug
      run: |
        dbt debug --target pr --vars "schema_id: $SCHEMA_ID"

    - name: Run dbt deps
      run: |
        dbt deps --target pr --vars "schema_id: $SCHEMA_ID"

    - name: Debug defer functionality
      run: |
        if [ -f "./dbt-state/manifest.json" ]; then
          echo "üîç Production manifest analysis:"
          echo "Sample model from production manifest:"
          cat ./dbt-state/manifest.json | jq '.nodes | with_entries(select(.key | contains("gold_pedidos_vendidos__valor_total"))) | to_entries[0].value | {database: .database, schema: .schema, name: .name, relation_name: .relation_name}' || echo "Model not found in manifest"
          
          echo "üîç Current project schema resolution:"
          dbt debug --target pr --vars "schema_id: $SCHEMA_ID"
          
          echo "üîç Testing defer with specific model:"
          dbt compile -m gold_pedidos_vendidos__valor_total --defer --state ./dbt-state/ --target pr --vars "schema_id: $SCHEMA_ID" --log-level info || echo "Defer compilation failed"
          
          echo "üîç All models in current project:"
          dbt ls --target pr --vars "schema_id: $SCHEMA_ID"
        else
          echo "‚ùå No manifest found for defer testing"
        fi

    - name: Run dbt with enhanced state-based execution
      run: |
        if [ -f "./dbt-state/manifest.json" ]; then
          echo "üéØ Using state-based execution for PR"
          
          # Debug state comparison with detailed output
          echo "üîç State comparison analysis:"
          echo "Modified models:"
          MODIFIED_MODELS=$(dbt ls -s 'state:modified' --defer --state ./dbt-state/ --target pr --vars "schema_id: $SCHEMA_ID" 2>&1 | tee /tmp/modified.log)
          echo "$MODIFIED_MODELS"
          
          echo "Modified+ models (with downstream):"
          MODIFIED_PLUS=$(dbt ls -s 'state:modified+' --defer --state ./dbt-state/ --target pr --vars "schema_id: $SCHEMA_ID" 2>&1 | tee /tmp/modified_plus.log)
          echo "$MODIFIED_PLUS"
          
          # Check if any models were found
          MODIFIED_COUNT=$(echo "$MODIFIED_MODELS" | grep -v "^$" | grep -c "template\." || echo "0")
          echo "üìä Found $MODIFIED_COUNT modified models"
          
          # Always run seeds in PR environment (they don't support state-based execution)
          echo "üå± Running seeds:"
          dbt seed --target pr --vars "schema_id: $SCHEMA_ID"
          
          # Run models with state-based selection or fallback
          if [ "$MODIFIED_COUNT" -gt 0 ]; then
            echo "üöÄ Running $MODIFIED_COUNT modified models with defer:"
            dbt run -s 'state:modified+' --defer --state ./dbt-state/ --target pr --vars "schema_id: $SCHEMA_ID" --log-level info
            
            echo "üß™ Running tests for modified models:"
            dbt test -s 'state:modified+' --defer --state ./dbt-state/ --target pr --vars "schema_id: $SCHEMA_ID"
          else
            echo "‚ö†Ô∏è  No modified models detected by state comparison"
            echo "üìã Checking for file-based changes as fallback:"
            
            # Git-based fallback detection
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E "models/.*\.sql$" || echo "")
            if [ -n "$CHANGED_FILES" ]; then
              echo "üìÅ Found changed model files: $CHANGED_FILES"
              echo "üöÄ Running all models due to detected file changes:"
              dbt run --target pr --vars "schema_id: $SCHEMA_ID"
              dbt test --target pr --vars "schema_id: $SCHEMA_ID"
            else
              echo "üîÑ No file changes detected, running minimal set:"
              # Run just one model to verify setup
              dbt run -m gold_pedidos_vendidos__valor_total --target pr --vars "schema_id: $SCHEMA_ID"
              dbt test -m gold_pedidos_vendidos__valor_total --target pr --vars "schema_id: $SCHEMA_ID"
            fi
          fi
        else
          echo "üìã Running full execution for PR (no previous state)"
          dbt seed --target pr --vars "schema_id: $SCHEMA_ID"
          dbt run --target pr --vars "schema_id: $SCHEMA_ID"
          dbt test --target pr --vars "schema_id: $SCHEMA_ID"
        fi

    - name: Drop PR schema
      run: |
        dbt run-operation drop_pr_staging_schemas \
          --args '{"project_id": "${{ env.PROJECT_ID }}", "PR_number": "${{ github.event.pull_request.number }}"}' \
          --profiles-dir ./